@using Microsoft.AspNetCore.SignalR.Client
@using Events
@using Core
@using System.Net
@using global::Notifications
@implements IDisposable

<MudBadge
    Content="@_notifications.Count"
    Overlap="true"
    Class="mx-6 my-4">
    <MudMenu
    Color="Color.Inherit"
    Size="Size.Medium"
    Icon="@Icons.Material.Filled.NotificationsNone">
        @foreach (var notification in _notifications)
        {
            @if (notification is BoardCreatedNotification boardCreatedNotification)
            {
                <BoardCreatedNotificationComponent Notification="boardCreatedNotification" />
            }
        }
    </MudMenu>
</MudBadge>

@code
{
    private HubConnection? _hubConnection;
    private readonly List<Notification> _notifications = new List<Notification>();

    protected override Task OnInitializedAsync()
    {
        NotificationBus.Subscribe<BoardCreatedNotification>(OnBoardCreatedNotification);
        NotificationBus.Subscribe<DismissNotificationNotification>(OnNotificationDismissed);
        
        return Task.CompletedTask;
    }

    private async Task OnBoardCreatedNotification(BoardCreatedNotification notification)
    {
        _notifications.Add(notification);
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnNotificationDismissed(DismissNotificationNotification notification)
    {
        _notifications.Remove(notification.SourceNotification);

        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        NotificationBus.Unsubscribe<BoardCreatedNotification>(OnBoardCreatedNotification);
        NotificationBus.Unsubscribe<DismissNotificationNotification>(OnNotificationDismissed);
    }
}
