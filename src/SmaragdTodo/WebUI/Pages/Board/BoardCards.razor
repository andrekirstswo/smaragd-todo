@using System.Linq;
@using Notifications
@implements IDisposable

@if (IsLoading())
{
    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
}
else
{
    <MudGrid>
        @foreach (var model in _boardCardViewModels!)
        {
            <MudItem xs="4">
                <BoardCard Model="model" />
            </MudItem>
        }
    </MudGrid>
}

@code {
    private List<BoardCardViewModel>? _boardCardViewModels;

    protected override async Task OnInitializedAsync()
    {
        _boardCardViewModels = null;
        var boards = await ApiClient.GetBoardsAsync();
        _boardCardViewModels = boards.Select(BoardCardViewModel.Map).ToList();

        NotificationBus.Subscribe<BoardCreatedNotification>(OnBoardCreatedNotification);
    }

    private async Task OnBoardCreatedNotification(BoardCreatedNotification notification)
    {
        _boardCardViewModels ??= new List<BoardCardViewModel>();

        if (_boardCardViewModels.All(t => t.BoardId != notification.BoardId))
        {
            _boardCardViewModels.Add(new BoardCardViewModel
            {
                BoardId = notification.BoardId,
                Name = notification.Name
            });
            
            await InvokeAsync(StateHasChanged);
        }
    }

    private bool IsLoading() => _boardCardViewModels == null;

    public void Dispose()
    {
        NotificationBus.Unsubscribe<BoardCreatedNotification>(OnBoardCreatedNotification);
    }

}